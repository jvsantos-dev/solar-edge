#include <WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>

// Configurações do DHT
#define DHTPIN 4          // Pino onde o sensor DHT está conectado
#define DHTTYPE DHT22     // Tipo do sensor DHT
DHT dht(DHTPIN, DHTTYPE); // Instancia o objeto DHT

// Configurações - variáveis editáveis
const char* default_SSID = "Wokwi-GUEST"; // Nome da rede Wi-Fi
const char* default_PASSWORD = ""; // Senha da rede Wi-Fi
const char* default_BROKER_MQTT = "74.163.88.61"; // Broker MQTT público para testes
const int default_BROKER_PORT = 1883; // Porta do Broker MQTT

// Tópicos para MQTT
const char* default_TOPICO_SUBSCRIBE = "/monitor/cmd"; // Tópico MQTT para escuta
const char* default_TOPICO_PUBLISH_TEMP = "/monitor/temperature"; // Tópico para temperatura
const char* default_TOPICO_PUBLISH_HUM = "/monitor/humidity"; // Tópico para umidade
const char* default_TOPICO_PUBLISH_LUX = "/monitor/lux"; // Tópico para luminosidade
const char* default_ID_MQTT = "fiware_001"; // ID do cliente MQTT
const int ldrPin = 34; // Pino do sensor de luminosidade

// Definições de autenticação MQTT (caso necessário)
const char* mqtt_user = ""; // Coloque o usuário, se necessário
const char* mqtt_pass = ""; // Coloque a senha, se necessário

WiFiClient espClient; // Cliente Wi-Fi
PubSubClient MQTT(espClient); // Cliente MQTT
char EstadoSaida = '0'; // Estado do LED (0 = desligado, 1 = ligado)

// Variáveis para armazenar as leituras de sensores
float luminosity = 0;
float temperature = 0;
float humidity = 0;

// Variáveis para médias
float mediaLuz = 0;
float mediaTemp = 0;
float mediaHum = 0;

String clima = "sol"; // Simulando um valor de clima (a lógica de clima pode ser implementada de acordo com sua necessidade)

// Função para inicializar a comunicação serial
void initSerial() {
    Serial.begin(115200); // Inicializa a comunicação serial
    Serial.println("Inicialização completa.");
}

// Função para conectar ao Wi-Fi
void initWiFi() {
    delay(10);
    Serial.println("------Conexão WI-FI------");
    Serial.print("Conectando-se na rede: ");
    Serial.println(default_SSID);
    reconectWiFi(); // Chama a função para conectar ao Wi-Fi
}

// Função para inicializar o MQTT
void initMQTT() {
    MQTT.setServer(default_BROKER_MQTT, default_BROKER_PORT); // Configura o broker MQTT
    MQTT.setCallback(mqtt_callback); // Define a função de callback para mensagens recebidas
}

// Função para inicializar as saídas
void InitOutput() {
    pinMode(LED_BUILTIN, OUTPUT); // Configura o pino do LED como saída
    digitalWrite(LED_BUILTIN, HIGH); // Garante que o LED inicie desligado
}

void setup() {
    InitOutput(); // Inicializa a saída do LED
    initSerial(); // Inicializa a comunicação serial
    initWiFi(); // Conecta ao Wi-Fi
    initMQTT(); // Inicializa a conexão MQTT
    dht.begin(); // Inicializa o sensor DHT
    delay(5000);
    MQTT.publish(default_TOPICO_PUBLISH_TEMP, "s|on"); // Publica estado inicial no tópico
}

void loop() {
    VerificaConexoesWiFIEMQTT(); // Verifica as conexões Wi-Fi e MQTT
    EnviaEstadoOutputMQTT(); // Envia o estado do LED via MQTT
    handleLuminosity(); // Lê e publica o valor de luminosidade
    handleDHT(); // Lê e publica temperatura e umidade
    MQTT.loop(); // Mantém a conexão MQTT ativa

    // Zera as médias a cada loop
    mediaLuz = 0;
    mediaTemp = 0;
    mediaHum = 0;

    // Loop para medir e calcular as médias
    for (int i = 0; i < 10; i++) {
        int ldrVal = analogRead(ldrPin); // Lê o valor do sensor de luminosidade
        luminosity = map(ldrVal, 969, 49, 0, 100); // Mapeia o valor do sensor LDR para 0-100
        mediaLuz += luminosity;

        humidity = dht.readHumidity(); // Lê a umidade
        temperature = dht.readTemperature(); // Lê a temperatura
        
        mediaTemp += temperature;
        mediaHum += humidity;
        delay(500); // Aguarda meio segundo entre as leituras
    }

    // Calcula as médias das leituras
    luminosity = mediaLuz / 10;
    temperature = mediaTemp / 10;
    humidity = mediaHum / 10;

    // Classifica a luminosidade, temperatura e radiação solar
    String luminosityClass = classificarLuminosidade(luminosity);
    String temperatureClass = classificarTemperatura(temperature);
    String solarRadiation = classificarSolar(temperature, clima, 50, 25);

    // Publica os dados de luminosidade, temperatura e umidade
    MQTT.publish(default_TOPICO_PUBLISH_LUX, String(luminosity).c_str());
    MQTT.publish(default_TOPICO_PUBLISH_TEMP, String(temperature).c_str());
    MQTT.publish(default_TOPICO_PUBLISH_HUM, String(humidity).c_str());

    // Exibe os dados no monitor serial para verificar se está funcionando
    Serial.print("Luminosidade: ");
    Serial.println(luminosity);
    Serial.print("Temperatura: ");
    Serial.println(temperature);
    Serial.print("Umidade: ");
    Serial.println(humidity);
    Serial.print("Classificação Luminosidade: ");
    Serial.println(luminosityClass);
    Serial.print("Classificação Temperatura: ");
    Serial.println(temperatureClass);
    Serial.print("Radiação Solar: ");
    Serial.println(solarRadiation);
}

// Função para classificar a temperatura
String classificarTemperatura(float temperatura) {
    if (temperatura < 10) {
        return "Muito Frio";
    } else if (temperatura >= 10 && temperatura < 20) {
        return "Frio";
    } else if (temperatura >= 20 && temperatura < 25) {
        return "Moderado";
    } else if (temperatura >= 25 && temperatura < 30) {
        return "Quente";
    } else {
        return "Muito Quente";
    }
}

// Função para classificar a luminosidade
String classificarLuminosidade(float luminosidade) {
    if (luminosidade < 20) {
        return "Escuro";
    } else if (luminosidade >= 20 && luminosidade < 40) {
        return "Nublado";
    } else if (luminosidade >= 40 && luminosidade < 60) {
        return "Parcialmente Ensolarado";
    } else {
        return "Ensolarado";
    }
}

// Função para classificar o nível de radiação solar
String classificarSolar(float temperatura, String clima, int limiteSolar, int limiteTemperatura) {
    if (temperatura >= limiteTemperatura && clima == "sol") {
        return "Alta radiação solar";
    } else if (temperatura < limiteTemperatura && clima == "sol") {
        return "Baixa radiação solar";
    } else if (clima == "nuvem") {
        return "Radiação solar moderada";
    } else if (clima == "chuva") {
        return "Sem radiação solar";
    } else {
        return "Radiação solar não determinada";
    }
}

// Função para verificar as conexões Wi-Fi e MQTT
void VerificaConexoesWiFIEMQTT() {
    if (WiFi.status() != WL_CONNECTED) {
        reconectWiFi(); // Reconecta ao Wi-Fi se a conexão falhar
    }
    if (!MQTT.connected()) {
        reconnectMQTT(); // Reconecta ao MQTT se a conexão falhar
    }
}

// Função para enviar o estado do LED via MQTT
void EnviaEstadoOutputMQTT() {
    String estado = String(EstadoSaida);
    MQTT.publish("/monitor/state", estado.c_str());
}

// Função para lidar com o sensor de luminosidade e enviar via MQTT
void handleLuminosity() {
    int ldrVal = analogRead(ldrPin);
    luminosity = map(ldrVal, 969, 49, 0, 100);
    String luminosityStr = String(luminosity);
    MQTT.publish(default_TOPICO_PUBLISH_LUX, luminosityStr.c_str());
}

// Função para lidar com os dados do DHT e enviar via MQTT
void handleDHT() {
    float t = dht.readTemperature();
    float h = dht.readHumidity();
    String temperatureStr = String(t);
    String humidityStr = String(h);
    MQTT.publish(default_TOPICO_PUBLISH_HUM, humidityStr.c_str());
    MQTT.publish(default_TOPICO_PUBLISH_TEMP, temperatureStr.c_str());
}

// Função de callback MQTT
void mqtt_callback(char* topic, byte* payload, unsigned int length) {
    String receivedPayload = "";
    for (int i = 0; i < length; i++) {
        receivedPayload += (char)payload[i];
    }

    if (receivedPayload == "on") {
        EstadoSaida = '1';
        digitalWrite(LED_BUILTIN, LOW); // Liga o LED
    } else if (receivedPayload == "off") {
        EstadoSaida = '0';
        digitalWrite(LED_BUILTIN, HIGH); // Desliga o LED
    }
}

// Função para reconectar ao Wi-Fi
void reconectWiFi() {
    WiFi.begin(default_SSID, default_PASSWORD);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("Conectado ao Wi-Fi");
}

// Função para reconectar ao MQTT
void reconnectMQTT() {
    while (!MQTT.connected()) {
        Serial.print("Conectando ao MQTT...");
        if (MQTT.connect(default_ID_MQTT, mqtt_user, mqtt_pass)) {
            Serial.println("Conectado ao Broker MQTT");
            MQTT.subscribe(default_TOPICO_SUBSCRIBE); // Subscrição do tópico
        } else {
            Serial.print("Falha na conexão, rc=");
            Serial.print(MQTT.state());
            delay(5000);
        }
    }
}
